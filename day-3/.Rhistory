library(tidyverse)
input <- read_lines('~/Desktop/advent-of-code-20/day-3/input.txt')
# optimize and try different slopes
slopes <- c(1, 3, 5, 7, 1.2)
valid.idx <- seq(1, length(input), 2)
input %>%
imap(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
ifelse(.y %in% valid.idx,
substr(.x, 1*.y-2, 1*.y-2), '') })
input
input %>%
imap(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
ifelse(.y %in% valid.idx,
substr(.x, 1*.y-2, 1*.y-2), '') })
valid.idx
input %>%
imap(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
ifelse(.y %in% valid.idx,
substr(.x, 1*.y-2, 1*.y-2), 'X') }) %>%
str_flatten()
input %>%
map(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
substr(.x, 3*.y-2, 3*.y-2) }) %>%
str_flatten() %>%
str_count('#')
routes <- slopes %>%
map(function(r) {
input %>%
imap(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
substr(.x, r*.y-2, r*.y-2) }) %>%
str_flatten() %>%
str_count('#') })
routes
# optimize and try different slopes
slopes <- c(1, 3, 5, 7)
routes <- slopes %>%
map(function(r) {
input %>%
imap(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
substr(.x, r*.y-2, r*.y-2) }) %>%
str_flatten() %>%
str_count('#') })
routes
r
r <-1
input %>%
imap(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
substr(.x, r*.y-2, r*.y-2) })
r<-3
input %>%
imap(~ str_dup(., length(input))) %>%
imap_chr(function(.x, .y) {
substr(.x, r*.y-2, r*.y-2) })
input %>%
imap(~ str_dup(., length(input))) %>% head()
valid.idx <- seq(1, length(input), 2)
valid.idx
input %>%
imap(~ str_dup(., length(input))) %>% length()
valid.rows <- list(seq(1, length(input), 2))
valid.rows %>% head()
valid.rows <- as.list(seq(1, length(input), 2))
valid.rows
valid.rows <- as.list(seq(1, length(input), 2))
input %>%
imap(~ str_dup(., length(input))) %>%
pluck(!!!valid.rows) %>%
length()
input %>%
imap(~ str_dup(., length(input))) %>%
pluck(valid.rows) %>%
length()
!!!valid.rows
input %>%
imap(~ str_dup(., length(input))) %>%
#pluck(!!!valid.rows) %>%
length()
input %>%
imap(~ str_dup(., length(input))) %>%
pluck(!!!valid.rows) %>%
length()
valid.rows
input %>%
map(~ str_dup(., length(input))) %>%
pluck(!!!valid.rows) %>%
length()
input %>%
map(~ str_dup(., length(input))) %>%
# pluck(!!!valid.rows) %>%
length()
# shitty last case with y=-2 slope
valid.rows <- seq(1, length(input), 2)
valid.rows
input %>%
map(~ str_dup(., length(input))) %>%
extract2(valid.rows)
input %>%
map(~ str_dup(., length(input))) %>%
magrittr::extract2(valid.rows)
input %>%
map(~ str_dup(., length(input))) %>%length()
routes
reduce(routes, `*`)
full.map <- map(input, str_dup(length(input)))
full.map <- map(input, ~ str_dup(., length(.)))
length(full.map)
# shitty last case with y=-2 slope
keep.rows <- seq(1, length(full.map), 2)
keep.rows
altered.map <- full.map[keep.rows]
length(altered.map)
altered.map %>%
imap_chr(function(.x, .y) {
substr(.x, 1*.y-2, 1*.y-2) }) %>%
str_flatten() %>%
str_count('#')
weird.route <- altered.map %>%
imap_chr(function(.x, .y) {
substr(.x, 1*.y-2, 1*.y-2) }) %>%
str_flatten() %>%
str_count('#')
all.routes <- c(routes, weird.route)
all.routes
reduce(routes, `*`)
reduce(all.routes, `*`)
# shitty last case with y=-2 slope
keep.rows <- seq(1, length(full.map), 2)
keep.rows
altered.map <- full.map[keep.rows]
length(full.map)
length(altered.map)
head(altered.map)
altered.map[[1]]
altered.map <- full.map[[keep.rows]]
full.map[1]
full.map[[1]
]
full.map <- map(input, ~ str_dup(., length(.)))
full.map
full.map <- map(input, ~ str_dup(., length(input)))
full.map[[1]]
altered.map <- full.map[keep.rows]
altered.map[[1]]
unique(map_int(input, str_length)) # 31 elements per row
length(input) # 323 lines long
full.map <- map(input, ~ str_dup(., length(input)))
# how many trees will be hit?
full.map %>%
imap_chr(function(.x, .y) {
substr(.x, 3*.y-2, 3*.y-2) }) %>%
str_flatten() %>%
str_count('#')
# optimize and try different slopes
slopes <- c(1, 3, 5, 7)
routes <- slopes %>%
map(function(r) {
full.map %>%
imap_chr(function(.x, .y) {
substr(.x, r*.y-2, r*.y-2) }) %>%
str_flatten() %>%
str_count('#') })
routes
# shitty last case with y=-2 slope
keep.rows <- seq(1, length(full.map), 2)
altered.map <- full.map[keep.rows]
weird.route <- altered.map %>%
imap_chr(function(.x, .y) {
substr(.x, 1*.y-2, 1*.y-2) }) %>%
str_flatten() %>%
str_count('#')
all.routes <- c(routes, weird.route)
reduce(all.routes, `*`)
all.routes
reduce(routes,`*`)
reduce(routes,`*`) ->tmp
tmp*52
95*164*95*88*52
full.map[[1]]
altered.map[[1]]
full.map[[2]][1:5]
full.map[[2]]
altered.map[[2]]
length(altered.ma[])
length(altered.map)
# delete every other row -> same as slope right 1 down 1
keep.rows <- seq(1, length(full.map), 2)
keep.rows
full.map %>% extract(keep.rows)
full.map %>% extract2(keep.rows)
full.map %>% magrittr::extract2(keep.rows)
substr(.x, 1*.y-2, 1*.y-2) }) %>%
str_flatten() %>%
str_count('#')
# delete every other row -> same as slope right 1 down 1
keep.rows <- seq(1, length(full.map), 2)
altered.map <- full.map[keep.rows]
last.route <- altered.map %>%
imap_chr(function(.x, .y) {
browser()
substr(.x, 1*.y-2, 1*.y-2) }) %>%
str_flatten() %>%
str_count('#')
.x
.y
substr(.x, 1*.y-2, 1*.y-2)
.y
.y
.x
.y
input <- read_lines('~/Desktop/advent-of-code-20/day-3/input.txt')
unique(map_int(input, str_length)) # 31 elements per row
length(input) # 323 lines long
full.map <- map(input, ~ str_dup(., length(input)))
# how many trees will be hit?
full.map %>%
imap_chr(function(.x, .y) {
substr(.x, 3*.y-2, 3*.y-2) }) %>%
str_flatten() %>%
str_count('#')
# optimize and try different slopes
slopes <- c(1, 3, 5, 7)
seq_along(full.map)
e
# delete every other row -> same as slope right 1 down 1
keep.rows <- seq(1, length(full.map), 2)
altered.map <- full.map[keep.rows]
last.route <- altered.map %>%
imap_chr(function(.x, .y) {
# browser()
substr(.x, 1*.y-2, 1*.y-2) }) %>%
str_flatten() %>%
str_count('#')
last.route
print(x)
# second attempt
for (x in seq(1, length(full.map), 2)) {
print(x)
}
# optimize and try different slopes
slopes <- c(1, 3, 5, 7)
trees
trees <- slopes %>%
map(function(r) {
full.map %>%
imap_chr(function(.x, .y) {
substr(.x, r*.y-(r-1), r*.y-(r-1)) }) %>%
str_flatten() %>%
str_count('#') })
trees
# delete every other row -> same as slope right 1 down 1
keep.rows <- seq(1, length(full.map), 2)
altered.map <- full.map[keep.rows]
last.route <- altered.map %>%
imap_chr(function(.x, .y) {
# browser()
substr(.x, 1*.y, 1*.y) }) %>%
str_flatten() %>%
str_count('#')
all.trees <- c(trees, last.route)
reduce(all.trees, `*`)
all.trees
93*164*82*91*44
